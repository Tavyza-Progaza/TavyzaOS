local a={}Thread={priority=10,grief=0,func=nil,co=nil,id=0,sleep=0,waiting=false,event=nil}local b=0;local function c()b=b+1;return b end;function Thread:new(d)local d=d or{}setmetatable(d,self)self.__index=self;d.id=c()d.func=nil;d.co=nil;d.priority=10;d.grief=0;d.sleep=0;d.waiting=false;d.event=nil;return d end;function Thread:isAlive()if self.co==nil then return false end;return coroutine.status(self.co)~="dead"end;function Thread:isReady()if not self:isAlive()then return false end;if self.sleep>0 then return false end;return true end;function Thread:run()if not self:isReady()then return false end;local e,f=coroutine.resume(self.co)if not e then return false,f end;local g=nil;if type(f)=="number"then self.sleep=f elseif type(f)=="string"then g=f end;return true,g end;function Thread:restart()self.co=coroutine.create(self.func)self.sleep=0;self.waiting=false;self.event=nil end;function a.create(h,i)local j=Thread:new()j.co=coroutine.create(h)j.func=h;if i~=nil then j.priority=i end;return j end;function a.sleep(k)if kernel.scheduler.current_thread==nil then return false end;checkArg(1,k,"number","nil")local l=computer.uptime()+(k or 0)repeat coroutine.yield(l-computer.uptime())until computer.uptime()>=l;return true end;function a.yield()if kernel.scheduler.current_thread==nil then return false end;coroutine.yield(0)return true end;function a.wait(m)if kernel.scheduler.current_thread==nil then return false end;while true do kernel.scheduler.current_thread.waiting=true;coroutine.yield(m)local n=kernel.scheduler.current_thread.event;if n~=nil then kernel.scheduler.current_thread.event=nil;kernel.scheduler.current_thread.waiting=false;return true,table.unpack(n)end end end;return a